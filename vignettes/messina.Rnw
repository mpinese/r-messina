%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Using Messina}
%\VignetteDepends{messina,leukemiasEset}
%\VignetteKeywords{messina,messinaSurv}
%\VignettePackage{messina}

\documentclass{article}

<<style-knitr, eval=TRUE, echo=FALSE, results="asis">>=
BiocStyle::latex()
@

\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
@

\title{Using Messina}
\author{Mark Pinese}

\maketitle

\tableofcontents

\section{Introduction}

Messina is a package of algorithms for generating optimal single-gene
threshold classifiers. These classifiers are directly useful when using
continuous data (eg. gene expression measurements) to develop diagnostic
or prognostic tests that will be based on binary assays such as
immunohistochemistry.

Messina is also useful for the flexible detection of differential
expression in the presence of outliers, either due to experimental
variations or hidden sample heterogeneity. When used in this fashion,
Messina can detect genes or proteins with biologically-interesting
heterogeneous patterns of expression, that are missed by conventional
statistics. Such heterogeneity in expression is a hallmark of sample
subtypes, and Messina can be used to detect features that could be
reflective of underlying, and undiscovered, sample subtypes.

The original Messina algorithm for classification and differential
expression analysis is described in the Messina paper \cite{Pinese:2009}.

\section{Finding genes that optimally distinguish between sample groups}

To demonstrate the use of Messina in constructing single-gene
classifiers to distinguish between two sample groups, we use the MILE
leukemia expression dataset in Bioconductor package \Biocexptpkg{leukemiasEset}:
<<class-load-libs, message=FALSE>>=
library(messina)
library(leukemiasEset)
data(leukemiasEset)
@

We will compare ALL samples to healthy bone marrow samples. We start by
extracting the expression and sample type data, and subsetting to just
ALL and NoL (normal bone marrow) samples:
<<class-prepare-data>>=
sample_type = pData(leukemiasEset)$LeukemiaType
expression_matrix = exprs(leukemiasEset)
normal_or_all = sample_type %in% c("NoL", "ALL")
sample_type = sample_type[normal_or_all]
expression_matrix = expression_matrix[,normal_or_all]
@

The expression matrix and sample type vectors now contain only data for
ALL or normal bone marrow samples.
<<class_show_data>>=
dim(expression_matrix)
sample_type
head(expression_matrix, 3)
@

Messina does not require gene filtering, so we do not perform it at this
stage, although in very large datasets this may be useful to reduce
runtimes. Simulation studies have indicated that Messina's
false-discovery rate is acceptably low (\textless{} 10\%) under most
conditions, so filtering is not necessary for FDR control \cite{Pinese:2009}.

We now create a binary variable indicating whether a given sample is ALL
or not, then run Messina. We start with stringent parameters (minimum
sensitivity and specificity both 95\%) to yield classifiers with high
performance, but possibly reduced robustness to noise. Note that Messina
works best with more relaxed parameters than these; and in this case the
function warns that the user is probably better off using a classical
statistical test.

<<class_fit_1>>=
sample_is_all = sample_type == "ALL"
messina_fit_1 = messina(expression_matrix, sample_is_all, min_sens = 0.95, 
	min_spec = 0.95, seed = 1234, progress = FALSE)
@

The result of the messina call is a MessinaClassResult object, and we
can see some summary information about the run just by printing the
variable:

<<class_display_1>>=
messina_fit_1
@

To see the top hits of the algorithm, we use the plot function,
specifying that we wish the two best features (by margin size) to be
displayed:

<<class_plot_1_point>>=
messinaTopResults(messina_fit_1, n = 20)
plot(messina_fit_1, i = 1:2)
@

In each of these plots, samples are in rows, with each sample's
expression and class represented by the location and colour of the
sample's point, respectively. The optimal classifier threshold value is
shown by a solid line, and the classifier margin by dotted lines.

Messina has an alternative plotting mode that some users may find more
natural:

<<class_plot_1_bar>>=
plot(messina_fit_1, i = 1, plot_type = "bar")
@

Messina's strength is that it can be tuned to find more noise-robust
classifiers, by relaxing its performance requirements. If we are willing
to accept a reduced specificity in ALL diagnosis (ie. some normal
samples will be called as ALL), in return for robustness to assay
variations, we can run Messina with altered parameters:

<<class_fit_2>>=
messina_fit_2 = messina(expression_matrix, sample_is_all, min_sens = 0.95, 
	min_spec = 0.6, seed = 1234, progress = FALSE)
messina_fit_2
@

The classifiers now found by Messina have wider margins, and therefore
are more robust to noise and experimental or technical variations, but
as a trade-off are more likely to report false positives when detecting
ALL.

<<class_plot_2>>=
plot(messina_fit_2, i = 1:10)
@

By varying the minimum sensitivity and specificity requirements, Messina
permits flexible tuning of the classifiers' performance to suit
different requirements.

\section{Detecting differential expression in the presence of outliers}

TODO

To illustrate the power of Messina to detect differential expression in
the presence of sample heterogeneity and outliers, we compare it to a
basic T-test, again looking for the difference in expression between ALL
and normal bone marrow.

First we perform the Messina fit on the data from the previous section,
using minimum sensitivity and specificity values of 70\%. This is a good
starting point for differential expression analysis, but can be varied
according to the desired robustness to outliers.

<<de_fit_messina>>=
messina_fit_diffexp = messina(expression_matrix, sample_is_all, min_sens = 0.7, 
	min_spec = 0.7, seed = 1234, progress = FALSE)
messina_fit_diffexp
@

We then perform a basic T-test against each feature.

<<de_fit_ttest>>=
ttest_fit_diffexp_pvalues = apply(expression_matrix, 1, function(xvals) 
	t.test(xvals ~ sample_is_all)$p.value)
ttest_fit_diffexp_pvalues_bh = p.adjust(ttest_fit_diffexp_pvalues, "BH")
@

We plot the results to compare them. For this example, we'll call
features with corrected P-values less than 0.01 detected by the T-test,
and features with margins of at least 1 detected by Messina.
<<de_messina_vs_ttest>>=
plot(ttest_fit_diffexp_pvalues_bh ~ messina_fit_diffexp@fits@summary$margin, pch = ".", 
	xlab = "Messina Margin", ylab = "T-Test P-value", log = "y")
abline(h = 0.01)
abline(v = 1)
table(ttest_fit_diffexp_pvalues_bh < 0.01, messina_fit_diffexp@fits@summary$margin >= 1)
@

\section{Identifying the best features to predict survival outcome}

TODO

\section{Session info}
<<sessionInfo, eval=TRUE>>=
sessionInfo()
@

\bibliographystyle{plain}
\bibliography{../REFERENCES}

\end{document}

