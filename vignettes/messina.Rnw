%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Using Messina}
%\VignetteDepends{messina,antiProfilesData}
%\VignetteKeywords{messina,messinaSurv}
%\VignettePackage{messina}

\documentclass{article}

<<style-knitr, eval=TRUE, echo=FALSE, results="asis">>=
BiocStyle::latex()
@

\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
opts_chunk$set(out.width="0.7\\maxwidth",fig.align="center")
@

\title{Using Messina}
\author{Mark Pinese}

\maketitle

\tableofcontents


\section{Introduction}

Messina is a package of algorithms for generating optimal single-gene
threshold classifiers. These classifiers are directly useful when using
continuous data (eg. gene expression measurements) to develop diagnostic
or prognostic tests that will be based on binary assays such as
immunohistochemistry.

Messina is also useful for the flexible detection of differential
expression in the presence of outliers, either due to experimental
variations or hidden sample heterogeneity. When used in this fashion,
Messina can detect genes or proteins with biologically-interesting
heterogeneous patterns of expression, that are missed by conventional
statistics. Such heterogeneity in expression is a hallmark of sample
subtypes, and Messina can be used to detect features that could be
reflective of underlying, and undiscovered, sample subtypes.

The original Messina algorithm for classification and differential
expression analysis is described in the Messina paper \cite{Pinese:2009}.


\section{Using Messina to construct optimal diagnostic classifiers}

This section will illustrate how Messina can be used to identify single features
(eg genes) that would be best suited to form the basis of a diagnostic test.

\subsection{The problem}
Translating gene expression data into a robust clinical test is challenging:
\begin{enumerate}
  \item{Although gene expression datasets typically measure the levels of many thousands
    of genes, practical clinical diagnostic tests only measure a very small number of
    markers (typically just one).}
  \item{High-throughput gene expression data and clinical tests use very different 
    measurement methods, so that a finding in one is not necessarily repeatable in the other.}
  \item{Clinical samples are subject to much more varied handling than experimental
    samples, requiring clinical tests to be very robust to handling variations.}
\end{enumerate}
Point (1) above means that although sophisticated classification algorithms can produce
high-performance multi-feature classifiers on gene expression data, these classifiers
are not translatable to a clinical test.  Special classifiers developed to work with
very small numbers of genes are required.  Points (2) and (3) reflect that, in the translation
of a laboratory result to a clinical diagnostic context, maximum robustness is desirable
to give the test the best chance of performing satisfactorily in the less controlled
clinical environment, using completely different measurement methods.

Conventional classifiers (eg. SVM, kNN) are poorly suited to the problem of generating
diagnostic tests, as they do not strongly control for the number of features used in the
classifier.  Statistical tests (eg. t-test) work on a per-feature basis, but are not
specifically designed for classification problems, and so do not produce optimally robust
tests.  Messina was specifically designed to solve this problem of generating optimal 
single-gene classifiers.

\subsection{Example: Designing a colon cancer screening test}

We use as an example the problem of distinguishing between colon biopsies of non-neoplastic
tissue, and those containing colon cancer.  In this example, we are ultimately interested 
in developing a screening test.  Therefore, the per-test cost should be low, and ideally
the test should be so robust that it may also work in samples more conveniently accessed
than tissue biopsies, such as peripheral blood.  Additionally, as the test will be a screen,
we require that the sensitivity of the test be high, although we are willing to accept a
lower specificity if it will gain us additional robustness.

We use the colon cancer expression dataset available in Bioconductor package
\Biocexptpkg{antiProfiles}.  This dataset has already been used to produce a high-performing
diagnostic classifier, but it is based on the measurements of 542 Affymetrix probesets,
and so would not be economical to use in the screening application we have in mind, as
well as quite challenging to transfer between sites and technologies.

We start by loading Messina and the data.
<<class-loadlibs, message=FALSE>>=
library(messina)
library(antiProfilesData)
data(apColonData)
apColonData
@

The data contain a number of different sample classes.  For our purposes we are only
interested in comparing tumour and normal samples.  We extract the expression data and class
labels, and subset to just these types of interest.  Messina does not require gene filtering, 
so we do not perform it at this stage, although in very large datasets this may be useful 
to reduce runtimes. 
<<class-prepdata>>=
x = exprs(apColonData)
y = pData(apColonData)$SubType

sel = y %in% c("normal", "tumor")
x = x[,sel]
y = y[sel]
@

We are now ready to run the Messina algorithm.  As we are interested in a screening test,
we desire a high test sensitivity, but are willing to accept a lower test specificity.
We choose a minimum sensitivity requirement of 0.95, and a minimum specificity requirement
of 0.85.  We now calculate the Messina fits, specifying that the "positive" class is 
tumour.
<<class-fit>>=
fit.apColon = messina(x, y == "tumor", min_sens = 0.95, min_spec = 0.85, seed = 1234, silent = TRUE)
@

The result is a messinaClassResult S4 object with overloaded show and plot functions.
<<class-show>>=
fit.apColon
@

Here we see that Messina found \Sexpr{sum(fit.apColon@fits@summary$passed)} probesets
that were suitable as the basis of threshold diagnostic classifiers for colon cancer.
A summary of the best probesets (by margin) is given at the bottom of the show results.  This can 
also be accessed directly, with more display options, using the messinaTopResults function.

By default, Messina ranks features in decreasing order
of their \emph{margin}, a concept borrowed from support vector machine theory.  
The margin is a measure of how robust the classifier is to
noise, and is equal to the distance between the performance limits of the threshold
value.  These limits are the gene expression values beyond which the threshold cannot
pass without the classifier no longer satisfying its user-supplied minimum performance
requirements.  The distance between the threshold and either limit is an indication of
how much error must be present in a gene expression measurement for the performance
guarantee of a Messina classifier to be violated.  The greater the margin, the more
robust the classifier.

To illustrate the performance limits, threshold, and margin concepts, we plot the 
Messina fit of the best probeset found.  We override the Messina default and set
the plot type to ``point'' (vs the default of ``bar''), as the data are approximately log transformed.
<<class-plot>>=
plot(fit.apColon, i = 1, plot_type = "point")
@

This plot displays the expression of each sample as a coloured point, with the colour
reflecting the sample's group: 0 for non-neoplastic tissue, and 1 for cancer.  The
threshold that Messina selected as being optimal for separating cancer from normal is
denoted by a solid black line, and on either side the dotted lines represent the 
performance limits of the classifier.  If the level of error in expression measurement
remains less than the distance between either dotted line and the threshold, the 
classifier's minimum sensitivity and specificity requirements will be satisfied.  The
distance between the two dotted lines is the margin.

In this example, the top probe found by Messina could perfectly separate cancer and
normal samples, with a very wide margin of approximately \Sexpr{round(max(fit.apColon@fits@summary$margin, na.rm = TRUE), 1)} units, or about \Sexpr{round(2^max(fit.apColon@fits@summary$margin, na.rm = TRUE)/10, 0)*10}-fold.
As we move down the list of Messina results, the separation between cancer and normal
samples progressively worsens, and the probesets become less suitable for devleopment into a diagnostic.  
In this way, Messina provides a principled ranking of probesets to use as leads
for the development of a diagnostic test, reporting the most robust leads first.

<<class-ranked-plots,out.width="0.4\\maxwidth",fig.show="hold">>=
plot(fit.apColon, i = c(1,2,10,50), plot_type = "point")
@

\iffalse
\subsubsection{Comparison of Messina result with a conventional statistical test}

To compare Messina to a more traditional approach, we repeat the above analysis to find colon cancer diagnostic probesets, this time using
a t-test to rank lead probesets.

<<class-trank>>=
tstat.apColon = apply(x, 1, function(probeset_exprs) t.test(probeset_exprs[y == "normal"], probeset_exprs[y == "tumor"])$statistic)
trank.apColon = rank(-abs(tstat.apColon), ties.method = "first")
tbestfeature.apColon = rownames(x)[which(trank.apColon == 1)]
tbestfeature.apColon
@

The top probeset by a t-test is \Sexpr{tbestfeature.apColon}.  We can 
look at how Messina ranked this feature, and get the Messina functions to plot this
feature's threshold classifier.
<<class-tbest-show>>
dummy = capture.output(fit.apColon.topresults <- messinaTopResults(fit.apColon))
fit.apColon.topresults[c(1,tbestfeature.apColon),]
plot(fit.apColon, i = 1, sort_feature == TRUE, plot_type = "point")
plot(fit.apColon, i = which(trank.apColon == 1), sort_features = FALSE, plot_type = "point")
@
\fi

\section{Detecting differential expression in the presence of outliers}

TODO
Simulation studies have indicated that Messina's
false-discovery rate is acceptably low (\textless{} 10\%) under most
conditions, so filtering is not necessary for FDR control \cite{Pinese:2009}.

<<de-load-libs, message=FALSE>>=
#library(messina)
#library(leukemiasEset)
#data(leukemiasEset)
@

To illustrate the power of Messina to detect differential expression in
the presence of sample heterogeneity and outliers, we compare it to a
basic T-test, again looking for the difference in expression between ALL
and normal bone marrow.

First we perform the Messina fit on the data from the previous section,
using minimum sensitivity and specificity values of 70\%. This is a good
starting point for differential expression analysis, but can be varied
according to the desired robustness to outliers.

<<de_fit_messina>>=
#messina_fit_diffexp = messina(expression_matrix, sample_is_all, min_sens = 0.7, 
#	min_spec = 0.7, seed = 1234, progress = FALSE)
#messina_fit_diffexp
@

We then perform a basic T-test against each feature.

<<de_fit_ttest>>=
#ttest_fit_diffexp_pvalues = apply(expression_matrix, 1, function(xvals) 
#	t.test(xvals ~ sample_is_all)$p.value)
#ttest_fit_diffexp_pvalues_bh = p.adjust(ttest_fit_diffexp_pvalues, "BH")
@

We plot the results to compare them. For this example, we'll call
features with corrected P-values less than 0.01 detected by the T-test,
and features with margins of at least 1 detected by Messina.
<<de_messina_vs_ttest>>=
#plot(ttest_fit_diffexp_pvalues_bh ~ messina_fit_diffexp@fits@summary$margin, pch = ".", 
#	xlab = "Messina Margin", ylab = "T-Test P-value", log = "y")
#abline(h = 0.01)
#abline(v = 1)
#table(ttest_fit_diffexp_pvalues_bh < 0.01, messina_fit_diffexp@fits@summary$margin >= 1)
@

\section{Identifying the best features to predict survival outcome}

TODO

\section{Session info}
<<sessionInfo, eval=TRUE>>=
sessionInfo()
@

\bibliographystyle{plain}
\bibliography{../REFERENCES}

\end{document}

